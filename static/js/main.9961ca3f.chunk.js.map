{"version":3,"sources":["js/react/components/Equals.js","js/react/components/Numbers.js","js/react/components/Operators.js","js/react/components/Decimal.js","js/react/components/Clear.js","js/react/components/Delete.js","js/react/components/Display.js","js/react/components/App.js","serviceWorker.js","index.js"],"names":["Equals","react_default","a","createElement","id","React","Component","Numbers","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","event","console","log","target","onClick","val","Operator","text","Decimal","Clear","Delete","Display","numBtnVals","num","opBtnVals","func","App","numBtns","map","numBtn","components_Numbers","key","opBtns","opBtn","ind","Operators","components_Display","components_Decimal","components_Equals","components_Clear","components_Delete","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9961ca3f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../../../css/App.css\";\n\nclass Equals extends React.Component {\n  render() {\n    return (\n      <div id=\"equals\">\n        <span>=</span>\n      </div>\n    );\n  }\n}\n\nexport default Equals;\n","import React from \"react\";\nimport \"../../../css/App.css\";\n\nclass Numbers extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(event) {\n    console.log(event.target.id);\n  }\n\n  render() {\n    return (\n      <div id={this.props.id} onClick={this.handleClick}>\n        <span>{this.props.val}</span>\n      </div>\n    );\n  }\n}\n\nexport default Numbers;\n","import React from \"react\";\nimport \"../../../css/App.css\";\n\nclass Operator extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return <div id={this.props.id}>{this.props.text}</div>;\n  }\n}\n\nexport default Operator;\n","import React from \"react\";\nimport \"../../../css/App.css\";\n\nclass Decimal extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div id=\"decimal\">\n        <span>.</span>\n      </div>\n    );\n  }\n}\n\nexport default Decimal;\n","import React from \"react\";\nimport \"../../../css/App.css\";\n\nclass Clear extends React.Component {\n  render() {\n    return (\n      <div id=\"clear\">\n        <span>Clear</span>\n      </div>\n    );\n  }\n}\n\nexport default Clear;\n","import React from \"react\";\nimport \"../../../css/App.css\";\n\nclass Delete extends React.Component {\n  render() {\n    return (\n      <div id=\"delete\">\n        <span>Delete</span>\n      </div>\n    );\n  }\n}\n\nexport default Delete;\n","import React from \"react\";\nimport \"../../../css/App.css\";\n\nclass Display extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div id=\"display\">\n        <span>Display</span>\n      </div>\n    );\n  }\n}\n\nexport default Display;\n","import React from \"react\";\nimport Equals from \"./Equals.js\";\nimport Numbers from \"./Numbers.js\";\nimport Operators from \"./Operators.js\";\nimport Decimal from \"./Decimal.js\";\nimport Clear from \"./Clear.js\";\nimport Delete from \"./Delete.js\";\nimport Display from \"./Display.js\";\nimport \"../../../css/App.css\";\n\n/* Array containing values for the Numbers components */\nconst numBtnVals = [\n  { num: 0, text: \"zero\" },\n  { num: 1, text: \"one\" },\n  { num: 2, text: \"two\" },\n  { num: 3, text: \"three\" },\n  { num: 4, text: \"four\" },\n  { num: 5, text: \"five\" },\n  { num: 6, text: \"six\" },\n  { num: 7, text: \"seven\" },\n  { num: 8, text: \"eight\" },\n  { num: 9, text: \"nine\" }\n];\n\n/* Array containing values for the Operators components */\nconst opBtnVals = [\n  { func: \"add\", text: \"+\" },\n  { func: \"subtract\", text: \"-\" },\n  { func: \"multiply\", text: \"ร\" },\n  { func: \"divide\", text: \"รท\" }\n];\n\nclass App extends React.Component {\n  render() {\n    /* Map the numBtnVals array to generate Numbers components for\n    each array element */\n    const numBtns = numBtnVals.map(numBtn => {\n      return <Numbers key={numBtn.num} id={numBtn.text} val={numBtn.num} />;\n    });\n\n    /* Map the opBtnVals array to generate Operators components for\n    each array element */\n    const opBtns = opBtnVals.map((opBtn, ind) => {\n      return <Operators key={ind} id={opBtn.func} text={opBtn.text} />;\n    });\n\n    return (\n      <div id=\"app\">\n        <Display />\n        {numBtns}\n        {opBtns}\n        <Decimal />\n        <Equals />\n        <Clear />\n        <Delete />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./js/redux/store\";\n\nimport App from \"./js/react/components/App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}